# Form implementation generated from reading ui file 'manager.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMessageBox
from azure.storage.blob import BlobServiceClient, BlobClient
from agents.planning_agent import PlannerAgent
from dotenv import load_dotenv
import asyncio
import os
import re
import requests
import time

load_dotenv()

########################
#                      #
# Author: Robert Patel #
#                      #
########################

class Ui_managerWindow(object):

    def setupUi(self, managerWindow):
        self.current_window = managerWindow
        managerWindow.setObjectName("managerWindow")
        managerWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(parent=managerWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.backgroundFrame = QtWidgets.QFrame(parent=self.centralwidget)
        self.backgroundFrame.setGeometry(QtCore.QRect(0, 0, 801, 551))
        self.backgroundFrame.setStyleSheet("background-color:FloralWhite")
        self.backgroundFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.backgroundFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.backgroundFrame.setObjectName("backgroundFrame")
        self.headerFrame = QtWidgets.QFrame(parent=self.backgroundFrame)
        self.headerFrame.setGeometry(QtCore.QRect(0, 0, 801, 80))
        self.headerFrame.setStyleSheet("background-color:DarkSlateGray")
        self.headerFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.headerFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.headerFrame.setObjectName("headerFrame")
        self.btnHome = QtWidgets.QPushButton(parent=self.headerFrame)
        self.btnHome.setGeometry(QtCore.QRect(420, 10, 113, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.btnHome.setFont(font)
        self.btnHome.setStyleSheet("QPushButton {\n"
"                border-radius: 20px;  \n"
"                background-color: FloralWhite;  \n"
"                color: black;\n"
"                font: bold 12px;  \n"
"                padding: 10px 20px;  \n"
"            }\n"
"            QPushButton:hover {\n"
"                background-color:DarkSeaGreen; \n"
"            }")
        self.btnHome.setAutoDefault(False)
        self.btnHome.setDefault(False)
        self.btnHome.setObjectName("btnHome")
        self.btnManager = QtWidgets.QPushButton(parent=self.headerFrame)
        self.btnManager.setGeometry(QtCore.QRect(550, 10, 113, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.btnManager.setFont(font)
        self.btnManager.setStyleSheet("QPushButton {\n"
"                border-radius: 20px;  \n"
"                background-color: FloralWhite;  \n"
"                color: black;\n"
"                font: bold 12px;  \n"
"                padding: 10px 20px;  \n"
"            }\n"
"            QPushButton:hover {\n"
"                background-color:DarkSeaGreen; \n"
"            }")
        self.btnManager.setObjectName("btnManager")
        self.btnResults = QtWidgets.QPushButton(parent=self.headerFrame)
        self.btnResults.setGeometry(QtCore.QRect(680, 10, 113, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.btnResults.setFont(font)
        self.btnResults.setStyleSheet("QPushButton {\n"
"                border-radius: 20px;  \n"
"                background-color: FloralWhite;  \n"
"                color: black;\n"
"                font: bold 12px;  \n"
"                padding: 10px 20px;  \n"
"            }\n"
"            QPushButton:hover {\n"
"                background-color:DarkSeaGreen; \n"
"            }")
        self.btnResults.setObjectName("btnResults")
        self.fileuploadFrame = QtWidgets.QFrame(parent=self.backgroundFrame)
        self.fileuploadFrame.setGeometry(QtCore.QRect(30, 120, 741, 201))
        self.fileuploadFrame.setStyleSheet("background-color:DarkSlateGray")
        self.fileuploadFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fileuploadFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fileuploadFrame.setObjectName("fileuploadFrame")
        self.btnUpload = QtWidgets.QPushButton(parent=self.fileuploadFrame)
        self.btnUpload.setGeometry(QtCore.QRect(310, 20, 113, 32))
        self.btnUpload.setStyleSheet("QPushButton {\n"
"             border-radius: 8px;  \n"
"             border: 2px solid FloralWhite;  \n"
"             color: FloralWhite;\n"
"            }\n"
"            QPushButton:hover {\n"
"                background-color:DarkSeaGreen; \n"
"            }")
        self.btnUpload.setObjectName("btnUpload")
        self.lblFileName = QtWidgets.QLabel(parent=self.fileuploadFrame)
        self.lblFileName.setGeometry(QtCore.QRect(20, 20, 101, 31))
        self.lblFileName.setStyleSheet("color:FloralWhite")
        self.lblFileName.setObjectName("lblFileName")
        self.cmbEvaluate = QtWidgets.QComboBox(parent=self.fileuploadFrame)
        self.cmbEvaluate.setGeometry(QtCore.QRect(120, 100, 181, 31))
        self.cmbEvaluate.setStyleSheet("background-color:FloralWhite;\n"
"border-radius: 8px;\n"
"border: 2px solid FloralWhite;\n"
"color: black;\n"
"")
        self.cmbEvaluate.setObjectName("cmbEvaluate")
        self.lblFileName_2 = QtWidgets.QLabel(parent=self.fileuploadFrame)
        self.lblFileName_2.setGeometry(QtCore.QRect(40, 100, 81, 31))
        self.lblFileName_2.setStyleSheet("color:FloralWhite")
        self.lblFileName_2.setObjectName("lblFileName_2")
        self.btnUpload_2 = QtWidgets.QPushButton(parent=self.fileuploadFrame)
        self.btnUpload_2.setGeometry(QtCore.QRect(310, 100, 113, 32))
        self.btnUpload_2.setStyleSheet("QPushButton {\n"
"             border-radius: 8px;  \n"
"             border: 2px solid FloralWhite;  \n"
"             color: FloralWhite;\n"
"            }\n"
"            QPushButton:hover {\n"
"                background-color:DarkSeaGreen; \n"
"            }")
        self.btnUpload_2.setObjectName("btnUpload_2")
        self.lblReportProgress = QtWidgets.QLabel(parent=self.fileuploadFrame)
        self.lblReportProgress.setGeometry(QtCore.QRect(520, 20, 181, 71))
        self.lblReportProgress.setStyleSheet("color:FloralWhite;\n"
"border: 2px solid FloralWhite;\n"
"border-radius: 8px")
        self.lblReportProgress.setObjectName("lblReportProgress")
        self.txtReportComplete = QtWidgets.QLineEdit(parent=self.fileuploadFrame)
        self.txtReportComplete.setGeometry(QtCore.QRect(520, 110, 181, 21))
        self.txtReportComplete.setStyleSheet("color:FloralWhite")
        self.txtReportComplete.setReadOnly(True)
        self.txtReportComplete.setObjectName("txtReportComplete")
        self.cmbUpload = QtWidgets.QComboBox(parent=self.fileuploadFrame)
        self.cmbUpload.setGeometry(QtCore.QRect(120, 20, 181, 31))
        self.cmbUpload.setStyleSheet("background-color:FloralWhite;\n"
"border-radius: 8px;\n"
"border: 2px solid FloralWhite;\n"
"color: black;\n"
"")
        self.cmbUpload.setObjectName("cmbUpload")
        self.btnUpload.raise_()
        self.lblFileName.raise_()
        self.cmbEvaluate.raise_()
        self.lblFileName_2.raise_()
        self.btnUpload_2.raise_()
        self.lblReportProgress.raise_()
        self.txtReportComplete.raise_()
        self.cmbUpload.raise_()
        managerWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=managerWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 43))
        self.menubar.setObjectName("menubar")
        managerWindow.setMenuBar(self.menubar)

        self.retranslateUi(managerWindow)
        QtCore.QMetaObject.connectSlotsByName(managerWindow)
        # Populates the combo box containing non-uploaded files.
        self.load_file_upload()
        # Populates the combo box containing the uploaded files.
        self.load_storage_blob()
        # Re-opens manager page upon button click.
        self.btnManager.clicked.connect(self.open_manager_page)
        # Opens home page when clicked.
        self.btnHome.clicked.connect(self.open_home_page)
        # Opens the report window when clicked.
        self.btnResults.clicked.connect(self.open_report_page)
        # Adds the selected file to the storage blob.
        self.btnUpload.clicked.connect(self.upload_file)
        # Runs the PlannerAgent when button is clicked.
        self.btnUpload_2.clicked.connect(self.run_planner_agent)

    def get_account_name(self):
        account_name = os.getenv("STORAGE_BLOB_ACCOUNT_NAME")
        return account_name
    
    def get_account_key(self):
        account_key = os.getenv("STORAGE_BLOB_KEY")
        return account_key
    def get_storage_connection_string(self):
        storage_connection_string = os.getenv("STORAGE_BLOB_CONNECTION_STRING")
        return storage_connection_string
    
    def get_search_endpoint(self):
        search_endpoint = os.getenv("AZURE_AI_SEARCH_ENDPOINT")
        return search_endpoint
    
    def get_search_index(self):
        search_index = os.getenv("AZURE_AI_SEARCH_INDEX")
        return search_index
    
    def get_search_indexer(self):
        search_indexer = os.getenv("AZURE_AI_SEARCH_INDEXER")
        return search_indexer
    
    def get_search_key(self):
        search_key = os.getenv("AZURE_AI_SEARCH_KEY")
        return search_key
    
    def get_search_api_version(self):
        search_api_version = os.getenv("AZURE_AI_API_VERSION")
        return search_api_version
    
    def get_search_name(self):
        search_name = os.getenv("AZURE_AI_SEARCH_NAME")
        return search_name

    # Helper method used to switch windows.
    def switch_window(self, window_class):
        self.window = QtWidgets.QMainWindow()
        self.ui = window_class()
        self.ui.setupUi(self.window)
        self.window.show()
        self.current_window.close()

    # Method to switch view to manager page.
    def open_manager_page(self):
       from ui.manager import Ui_managerWindow
       self.switch_window(Ui_managerWindow)

    # Method to switch view to home page.
    def open_home_page(self):
        from ui.ai_agent import Ui_mainHomeWindow
        self.switch_window(Ui_mainHomeWindow)

    # Method to switch view to report page.
    def open_report_page(self, report_text):
        from ui.report import Ui_reportWindow
        if not isinstance(report_text, str) or not report_text.strip():
                report_text = "Error: No report available. Please run evaluation first in manager tab."

        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_reportWindow()
        self.ui.setupUi(self.window)
        formatted = report_text.replace("Risk Analysis:", "\n\nRisk Analysis:").replace("Recommended Next Steps:", "\n\nRecommended Next Steps:")
        formatted = re.sub(r"(- [^\n]+?– [^\n]+?– [^\n]+?)(?= -|\n|$)", r"\1\n", formatted)
        self.ui.txtReportOutput.setPlainText(formatted)
        self.window.show()
        self.current_window.close()


    def load_file_upload(self):
        # Creates variable to hold the value of the directory location.
        directory = "/Users/alexpatel/Desktop/ai-third-party-risk-evaluator/test_files/"
        try:
                # Creates list of files in directory.
                files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]
                if files:
                      # Adds filenames to combo box.
                      self.cmbUpload.addItems(files)
                else:
                       # Creates message box to display error message for empty directory.
                       msg = QMessageBox()
                       msg.setText("No files found in the directory.")
                       msg.exec()
        # Throws exception if a file is not found in the directory.
        except FileNotFoundError as e:
             print(e)

    # Uploads file to container in storage blob.
    def upload_file(self):
        # Assigns the selected filename from the combo box to a variable.
        file_name = self.cmbUpload.currentText()
        # Set values for blob access variables.
        container_name = "architecture-test-files"
        local_file_path = f"/Users/alexpatel/Desktop/ai-third-party-risk-evaluator/test_files/{file_name}"
        blob_name = os.path.basename(local_file_path)  # file name in the container

        # Connect to the blob service
        blob_service_client = BlobServiceClient.from_connection_string(self.get_storage_connection_string())
        # Create a blob client
        blob_client = blob_service_client.get_blob_client(container=container_name, blob=blob_name)

        # Upload the file
        with open(local_file_path, "rb") as data:
                        blob_client.upload_blob(data, overwrite=True)
                        # Creates and executes message box to display successful upload.
                        success_msg = QMessageBox()
                        success_msg.setText("File Uploaded to Storage Blob.")
                        success_msg.exec()
                        self.cmbUpload.setCurrentIndex(0)
        self.load_file_upload()
        self.refresh_indexer()
        self.cmbEvaluate.clear()
        self.cmbUpload.clear()
        self.load_file_upload()
        self.load_storage_blob()

    def load_storage_blob(self):
        # Establishes variables to connect to storage blob.
        container_name = "architecture-test-files"

        # Create the client w/ connection string.
        blob_service_client = BlobServiceClient.from_connection_string(self.get_storage_connection_string())
        container_client = blob_service_client.get_container_client(container_name)

        # List all blobs
        blob_list = container_client.list_blobs()
        # Adds all files in storage
        for blob in blob_list:
                self.cmbEvaluate.addItem(blob.name)

    def run_planner_agent(self):
        from ui.progress_bar import ProgressDialog
        from PyQt6.QtWidgets import QApplication
        
        # Assign user selected file to variable.
        file_selection = self.cmbEvaluate.currentText()
        # Deletes all instances of documents in active folder.
        self.purge_stale_documents(file_selection)
        # Move processed file out of the inactive folder to prevent reprocessing
        self.set_Active(file_selection)
        # Refreshes indexer to ensure file is in active folder.
        self.refresh_indexer()

        time.sleep(5)
         # Creates and displays the progress dialog
        self.progress_dialog = ProgressDialog("Starting agent pipeline...")
        self.progress_dialog.update_progress(0)

        # Forces the UI to process the dialog render
        QApplication.processEvents()
        try:
                # Directly run the async PlannerAgent and wait for result
                planner = PlannerAgent(progress_dialog=self.progress_dialog)
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                        # Assigns result from planner agent to value.
                        result = loop.run_until_complete(planner.planner_main(file_selection))
                finally:
                        # Closes planner agent after report is generated.
                        loop.run_until_complete(loop.shutdown_asyncgens())
                        loop.close()
                
                # PlannerAgent should return a report as a string; if not, show an error.
                if isinstance(result, str):
                        # Open report page with report data.
                        self.txtReportComplete.setText("Completed Report")
                        self.open_report_page(result)
                else:
                        # Opens report page with error message.
                        self.open_report_page("PlannerAgent did not return a valid report.")
        # Throws exception in text box on manager tab.
        except Exception as e:
               print(f"Error:{e}")

        # Move processed file out of the active folder to prevent reprocessing
        self.setNotActive(file_selection)
        # Re-runs indexer to update the blobs.
        self.refresh_indexer()

    def set_Active(self, filename):

        # Replace these with your actual values
        source_container = "architecture-test-files"
        destination_container = "active"
        blob_name = filename  # The file you want to move

        # Create a client
        blob_service_client = BlobServiceClient.from_connection_string(self.get_storage_connection_string())

        # Get clients for source and destination
        source_blob = blob_service_client.get_blob_client(container=source_container, blob=blob_name)
        destination_blob = blob_service_client.get_blob_client(container=destination_container, blob=blob_name)

        # Start the copy
        copy_operation = destination_blob.start_copy_from_url(source_blob.url)

        # OPTIONAL: Wait for copy to complete (for small files, this is usually instant)
        props = destination_blob.get_blob_properties()

        # Delete from the source container
        source_blob.delete_blob()

    def setNotActive(self, filename):
        
        # Replace these with your actual values
        source_container = "active"
        destination_container = "architecture-test-files"
        # The file being moved
        blob_name = filename

        # Create a client
        blob_service_client = BlobServiceClient.from_connection_string(self.get_storage_connection_string())

        # Gets clients for source and destination
        source_blob = blob_service_client.get_blob_client(container=source_container, blob=blob_name)
        destination_blob = blob_service_client.get_blob_client(container=destination_container, blob=blob_name)

        # Starts the copy
        copy_operation = destination_blob.start_copy_from_url(source_blob.url)

        # Waits for copy to complete (for small files, this is usually instant)
        props = destination_blob.get_blob_properties()

        # Delete file from the source container
        source_blob.delete_blob()

    def refresh_indexer(self):

        base_url = f"https://{self.get_search_name()}.search.windows.net"
        run_url = f"{base_url}/indexers/{self.get_search_indexer()}/run?api-version={self.get_search_api_version()}"
        status_url = f"{base_url}/indexers/{self.get_search_indexer()}/status?api-version={self.get_search_api_version()}"

        headers = {
                "Content-Type": "application/json",
                "api-key": self.get_search_key()
        }

        # Trigger the indexer
        response = requests.post(run_url, headers=headers)
        if response.status_code != 202:
                return

        # Poll for status
        while True:
                status_resp = requests.get(status_url, headers=headers)
                if status_resp.status_code != 200:
                        time.sleep(2)
                        continue
                status_json = status_resp.json()
                last_status = status_json.get("lastResult", {}).get("status")

                if last_status == "success":
                        break
                # End method if refresh is a success.
                elif last_status in ["transientFailure", "error"]:
                        # Throw exception if refresh fails.
                        raise RuntimeError(f"Indexer failed: {status_json}")
                else:
                        # Wait 2 seconds before attempting again.
                        time.sleep(2)

    def purge_stale_documents(self, current_filename: str):

        headers = {
                "Content-Type": "application/json",
                "api-key": self.get_search_key()
        }

        # Retrieves all documents from the index.
        query_url = f"https://{self.get_search_name()}.search.windows.net/indexes/{self.get_search_index()}/docs/search?api-version={self.get_search_api_version()}"
        body = {
                "search": "*",
                "top": 10
        }

        response = requests.post(query_url, headers=headers, json=body)
        if response.status_code != 200:
                return

        docs = response.json().get("value", [])

        # Select files that do not match user selected filename for deletion.
        docs_to_delete = [doc for doc in docs if doc.get("title") != current_filename]

        if not docs_to_delete:
                return

        # Build the delete request.
        delete_payload = [
                {
                "@search.action": "delete",
                "chunk_id": doc["chunk_id"]
                }
                for doc in docs_to_delete
        ]

        # Delete the files from the index.
        delete_url = f"https://{self.get_search_name()}.search.windows.net/indexes/{self.get_search_index()}/docs/index?api-version={self.get_search_api_version()}"
        del_response = requests.post(delete_url, headers=headers, json={"value": delete_payload})

        # Verify that correct files were deleted.
        verify_resp = requests.post(query_url, headers=headers, json=body)
        if verify_resp.status_code == 200:
                remaining_titles = {doc.get("title") for doc in verify_resp.json().get("value", [])}
                self.txtReportComplete.setText(", ".join(remaining_titles))

    def retranslateUi(self, managerWindow):
        _translate = QtCore.QCoreApplication.translate
        managerWindow.setWindowTitle(_translate("managerWindow", "Manager"))
        self.btnHome.setText(_translate("managerWindow", "Home"))
        self.btnManager.setText(_translate("managerWindow", "Manager"))
        self.btnResults.setText(_translate("managerWindow", "Results"))
        self.btnUpload.setText(_translate("managerWindow", "Upload File"))
        self.lblFileName.setText(_translate("managerWindow", "Enter Filename:"))
        self.lblFileName_2.setText(_translate("managerWindow", "Select a file:"))
        self.btnUpload_2.setText(_translate("managerWindow", "Evaulate File"))
        self.lblReportProgress.setText(_translate("managerWindow", "Report Generation Progress"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    managerWindow = QtWidgets.QMainWindow()
    ui = Ui_managerWindow()
    ui.setupUi(managerWindow)
    managerWindow.show()
    sys.exit(app.exec())

