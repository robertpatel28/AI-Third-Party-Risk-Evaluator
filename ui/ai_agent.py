# Form implementation generated from reading ui file 'ai_agent.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
########################
#                      #
# Author: Robert Patel #
#                      #
########################

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMessageBox

class Ui_mainHomeWindow(object):
    def setupUi(self, mainHomeWindow):
        self.main_window = mainHomeWindow
        mainHomeWindow.setObjectName("mainHomeWindow")
        mainHomeWindow.resize(821, 603)
        self.centralwidget = QtWidgets.QWidget(parent=mainHomeWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.mainFrame = QtWidgets.QFrame(parent=self.centralwidget)
        self.mainFrame.setGeometry(QtCore.QRect(0, 0, 821, 561))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.mainFrame.setFont(font)
        self.mainFrame.setStyleSheet("background-color:FloralWhite")
        self.mainFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.mainFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.mainFrame.setObjectName("mainFrame")
        self.headerFrame = QtWidgets.QFrame(parent=self.mainFrame)
        self.headerFrame.setGeometry(QtCore.QRect(0, 0, 821, 80))
        self.headerFrame.setStyleSheet("background-color:DarkSlateGray")
        self.headerFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.headerFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.headerFrame.setObjectName("headerFrame")
        self.btnResults = QtWidgets.QPushButton(parent=self.headerFrame)
        self.btnResults.setGeometry(QtCore.QRect(700, 10, 113, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.btnResults.setFont(font)
        self.btnResults.setStyleSheet("QPushButton {\n"
"                border-radius: 20px;  \n"
"                background-color: FloralWhite;  \n"
"                color: black;\n"
"                font: bold 12px;  \n"
"                padding: 10px 20px;  \n"
"            }\n"
"            QPushButton:hover {\n"
"                background-color:DarkSeaGreen; \n"
"            }")
        self.btnResults.setObjectName("btnResults")
        self.btnManager = QtWidgets.QPushButton(parent=self.headerFrame)
        self.btnManager.setGeometry(QtCore.QRect(570, 10, 113, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.btnManager.setFont(font)
        self.btnManager.setStyleSheet("QPushButton {\n"
"                border-radius: 20px;  \n"
"                background-color: FloralWhite;  \n"
"                color: black;\n"
"                font: bold 12px;  \n"
"                padding: 10px 20px;  \n"
"            }\n"
"            QPushButton:hover {\n"
"                background-color:DarkSeaGreen; \n"
"            }")
        self.btnManager.setObjectName("btnManager")
        self.btnHome = QtWidgets.QPushButton(parent=self.headerFrame)
        self.btnHome.setGeometry(QtCore.QRect(440, 10, 113, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.btnHome.setFont(font)
        self.btnHome.setStyleSheet("QPushButton {\n"
"                border-radius: 20px;  \n"
"                background-color: FloralWhite;  \n"
"                color: black;\n"
"                font: bold 12px;  \n"
"                padding: 10px 20px;  \n"
"            }\n"
"            QPushButton:hover {\n"
"                background-color:DarkSeaGreen; \n"
"            }")
        self.btnHome.setAutoDefault(False)
        self.btnHome.setDefault(False)
        self.btnHome.setObjectName("btnHome")
        self.chatFrame = QtWidgets.QFrame(parent=self.mainFrame)
        self.chatFrame.setGeometry(QtCore.QRect(60, 120, 351, 371))
        self.chatFrame.setAutoFillBackground(False)
        self.chatFrame.setStyleSheet("background-color:DarkSlateGray")
        self.chatFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.chatFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.chatFrame.setObjectName("chatFrame")
        self.txtChat = QtWidgets.QTextEdit(parent=self.chatFrame)
        self.txtChat.setGeometry(QtCore.QRect(10, 10, 331, 241))
        self.txtChat.setReadOnly(True)
        font = QtGui.QFont()
        font.setFamily("Futura")
        font.setPointSize(10)
        self.txtChat.setFont(font)
        self.txtChat.setStyleSheet("background-color:FloralWhite;\n"
"color: black;\n"
"")
        self.txtChat.setObjectName("txtChat")
        self.txtUserQuestion = QtWidgets.QTextEdit(parent=self.chatFrame)
        self.txtUserQuestion.setGeometry(QtCore.QRect(10, 290, 331, 71))
        self.txtUserQuestion.setStyleSheet("background-color:FloralWhite;\n"
"color: black;")
        self.txtUserQuestion.setObjectName("txtUserQuestion")
        self.lblChatStatement = QtWidgets.QLabel(parent=self.chatFrame)
        self.lblChatStatement.setGeometry(QtCore.QRect(10, 260, 241, 16))
        font = QtGui.QFont()
        font.setFamily("Futura")
        self.lblChatStatement.setFont(font)
        self.lblChatStatement.setStyleSheet("color:DarkSeaGreen")
        self.lblChatStatement.setObjectName("lblChatStatement")
        self.btnAnswer = QtWidgets.QPushButton(parent=self.chatFrame)
        self.btnAnswer.setGeometry(QtCore.QRect(250, 260, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.btnAnswer.setFont(font)
        self.btnAnswer.setStyleSheet("color:White")
        self.btnAnswer.setObjectName("btnAnswer")
        self.chatFrame_2 = QtWidgets.QFrame(parent=self.mainFrame)
        self.chatFrame_2.setGeometry(QtCore.QRect(430, 120, 351, 371))
        self.chatFrame_2.setAutoFillBackground(False)
        self.chatFrame_2.setStyleSheet("background-color:DarkSlateGray")
        self.chatFrame_2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.chatFrame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.chatFrame_2.setObjectName("chatFrame_2")
        self.txtInformation = QtWidgets.QTextEdit(parent=self.chatFrame_2)
        self.txtInformation.setGeometry(QtCore.QRect(10, 10, 331, 351))
        font = QtGui.QFont()
        font.setFamily("Futura")
        font.setPointSize(10)
        self.txtInformation.setFont(font)
        self.txtInformation.setStyleSheet("background-color:FloralWhite;\n"
"color: black;\n"
"")
        self.txtInformation.setReadOnly(True)
        self.txtInformation.setObjectName("txtInformation")
        mainHomeWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=mainHomeWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 821, 43))
        self.menubar.setObjectName("menubar")
        mainHomeWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=mainHomeWindow)
        self.statusbar.setObjectName("statusbar")
        mainHomeWindow.setStatusBar(self.statusbar)

        self.retranslateUi(mainHomeWindow)
        QtCore.QMetaObject.connectSlotsByName(mainHomeWindow)

        # Opens manager page upon button click.
        self.btnManager.clicked.connect(self.open_manager_page)
        # Re-opens home page when clicked.
        self.btnHome.clicked.connect(self.open_home_page)
        # Opens the report game upon button click.
        self.btnResults.clicked.connect(self.open_report_page)
        # Executes AI to reply to user question upon click.
        self.btnAnswer.clicked.connect(self.user_question_response)

   # Helper method used to switch windows.
    def switch_window(self, window_class):
        self.window = QtWidgets.QMainWindow()
        self.ui = window_class()
        self.ui.setupUi(self.window)
        self.window.show()
        self.main_window.close()

    # Method to switch view to manager page.
    def open_manager_page(self):
       from ui.manager import Ui_managerWindow
       self.switch_window(Ui_managerWindow)

    # Method to switch view to home page.
    def open_home_page(self):
        from ui.ai_agent import Ui_mainHomeWindow
        self.switch_window(Ui_mainHomeWindow)

    # Method to switch view to report page.
    def open_report_page(self):
        from ui.report import Ui_reportWindow
        self.switch_window(Ui_reportWindow)

    def user_question_response(self):
        user_input = self.txtUserQuestion.toPlainText().strip()
        if not user_input:
            # Creates a new message box object.
            msg = QMessageBox()
            # Adds text to message box.
            msg.setText("Please enter a question for the AI to respond to in the input box below.")
            # Displays the message box.
            msg.exec()

    def retranslateUi(self, mainHomeWindow):
        _translate = QtCore.QCoreApplication.translate
        mainHomeWindow.setWindowTitle(_translate("mainHomeWindow", "Home"))
        self.btnResults.setText(_translate("mainHomeWindow", "Results"))
        self.btnManager.setText(_translate("mainHomeWindow", "Manager"))
        self.btnHome.setText(_translate("mainHomeWindow", "Home"))
        self.lblChatStatement.setText(_translate("mainHomeWindow", "Have a queston? Feel free to ask below."))
        self.btnAnswer.setText(_translate("mainHomeWindow", "Generate Answer"))
        self.txtInformation.setHtml(_translate("mainHomeWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Futura\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">StructureGrade AI is an intelligent grading application designed to evaluate enterprise structure documentation using a multi-agent framework powered by Retrieval-Augmented Generation (RAG). The system analyzes responses to structured questionnaires, assesses organizational soundness, and delivers a <span style=\" font-weight:600;\">Pass/Fail</span> outcome based on compliance, clarity, and alignment with best practices.</p></body></html>"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    mainHomeWindow = QtWidgets.QMainWindow()
    ui = Ui_mainHomeWindow()
    ui.setupUi(mainHomeWindow)
    mainHomeWindow.show()
    sys.exit(app.exec())
